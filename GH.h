/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GH_H
#define GH_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "graphrpc_types.h"

namespace GH {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class GHIf {
 public:
  virtual ~GHIf() {}
  virtual int32_t add_node(const int32_t node_id) = 0;
  virtual int32_t add_edge(const int32_t node_a_id, const int32_t node_b_id) = 0;
  virtual int32_t remove_node(const int32_t node_id) = 0;
  virtual int32_t remove_edge(const int32_t node_a_id, const int32_t node_b_id) = 0;
};

class GHIfFactory {
 public:
  typedef GHIf Handler;

  virtual ~GHIfFactory() {}

  virtual GHIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GHIf* /* handler */) = 0;
};

class GHIfSingletonFactory : virtual public GHIfFactory {
 public:
  GHIfSingletonFactory(const boost::shared_ptr<GHIf>& iface) : iface_(iface) {}
  virtual ~GHIfSingletonFactory() {}

  virtual GHIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GHIf* /* handler */) {}

 protected:
  boost::shared_ptr<GHIf> iface_;
};

class GHNull : virtual public GHIf {
 public:
  virtual ~GHNull() {}
  int32_t add_node(const int32_t /* node_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t add_edge(const int32_t /* node_a_id */, const int32_t /* node_b_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t remove_node(const int32_t /* node_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t remove_edge(const int32_t /* node_a_id */, const int32_t /* node_b_id */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _GH_add_node_args__isset {
  _GH_add_node_args__isset() : node_id(false) {}
  bool node_id :1;
} _GH_add_node_args__isset;

class GH_add_node_args {
 public:

  GH_add_node_args(const GH_add_node_args&);
  GH_add_node_args& operator=(const GH_add_node_args&);
  GH_add_node_args() : node_id(0) {
  }

  virtual ~GH_add_node_args() throw();
  int32_t node_id;

  _GH_add_node_args__isset __isset;

  void __set_node_id(const int32_t val);

  bool operator == (const GH_add_node_args & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    return true;
  }
  bool operator != (const GH_add_node_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GH_add_node_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GH_add_node_pargs {
 public:


  virtual ~GH_add_node_pargs() throw();
  const int32_t* node_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GH_add_node_result__isset {
  _GH_add_node_result__isset() : success(false) {}
  bool success :1;
} _GH_add_node_result__isset;

class GH_add_node_result {
 public:

  GH_add_node_result(const GH_add_node_result&);
  GH_add_node_result& operator=(const GH_add_node_result&);
  GH_add_node_result() : success(0) {
  }

  virtual ~GH_add_node_result() throw();
  int32_t success;

  _GH_add_node_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const GH_add_node_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GH_add_node_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GH_add_node_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GH_add_node_presult__isset {
  _GH_add_node_presult__isset() : success(false) {}
  bool success :1;
} _GH_add_node_presult__isset;

class GH_add_node_presult {
 public:


  virtual ~GH_add_node_presult() throw();
  int32_t* success;

  _GH_add_node_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GH_add_edge_args__isset {
  _GH_add_edge_args__isset() : node_a_id(false), node_b_id(false) {}
  bool node_a_id :1;
  bool node_b_id :1;
} _GH_add_edge_args__isset;

class GH_add_edge_args {
 public:

  GH_add_edge_args(const GH_add_edge_args&);
  GH_add_edge_args& operator=(const GH_add_edge_args&);
  GH_add_edge_args() : node_a_id(0), node_b_id(0) {
  }

  virtual ~GH_add_edge_args() throw();
  int32_t node_a_id;
  int32_t node_b_id;

  _GH_add_edge_args__isset __isset;

  void __set_node_a_id(const int32_t val);

  void __set_node_b_id(const int32_t val);

  bool operator == (const GH_add_edge_args & rhs) const
  {
    if (!(node_a_id == rhs.node_a_id))
      return false;
    if (!(node_b_id == rhs.node_b_id))
      return false;
    return true;
  }
  bool operator != (const GH_add_edge_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GH_add_edge_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GH_add_edge_pargs {
 public:


  virtual ~GH_add_edge_pargs() throw();
  const int32_t* node_a_id;
  const int32_t* node_b_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GH_add_edge_result__isset {
  _GH_add_edge_result__isset() : success(false) {}
  bool success :1;
} _GH_add_edge_result__isset;

class GH_add_edge_result {
 public:

  GH_add_edge_result(const GH_add_edge_result&);
  GH_add_edge_result& operator=(const GH_add_edge_result&);
  GH_add_edge_result() : success(0) {
  }

  virtual ~GH_add_edge_result() throw();
  int32_t success;

  _GH_add_edge_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const GH_add_edge_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GH_add_edge_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GH_add_edge_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GH_add_edge_presult__isset {
  _GH_add_edge_presult__isset() : success(false) {}
  bool success :1;
} _GH_add_edge_presult__isset;

class GH_add_edge_presult {
 public:


  virtual ~GH_add_edge_presult() throw();
  int32_t* success;

  _GH_add_edge_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GH_remove_node_args__isset {
  _GH_remove_node_args__isset() : node_id(false) {}
  bool node_id :1;
} _GH_remove_node_args__isset;

class GH_remove_node_args {
 public:

  GH_remove_node_args(const GH_remove_node_args&);
  GH_remove_node_args& operator=(const GH_remove_node_args&);
  GH_remove_node_args() : node_id(0) {
  }

  virtual ~GH_remove_node_args() throw();
  int32_t node_id;

  _GH_remove_node_args__isset __isset;

  void __set_node_id(const int32_t val);

  bool operator == (const GH_remove_node_args & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    return true;
  }
  bool operator != (const GH_remove_node_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GH_remove_node_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GH_remove_node_pargs {
 public:


  virtual ~GH_remove_node_pargs() throw();
  const int32_t* node_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GH_remove_node_result__isset {
  _GH_remove_node_result__isset() : success(false) {}
  bool success :1;
} _GH_remove_node_result__isset;

class GH_remove_node_result {
 public:

  GH_remove_node_result(const GH_remove_node_result&);
  GH_remove_node_result& operator=(const GH_remove_node_result&);
  GH_remove_node_result() : success(0) {
  }

  virtual ~GH_remove_node_result() throw();
  int32_t success;

  _GH_remove_node_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const GH_remove_node_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GH_remove_node_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GH_remove_node_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GH_remove_node_presult__isset {
  _GH_remove_node_presult__isset() : success(false) {}
  bool success :1;
} _GH_remove_node_presult__isset;

class GH_remove_node_presult {
 public:


  virtual ~GH_remove_node_presult() throw();
  int32_t* success;

  _GH_remove_node_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GH_remove_edge_args__isset {
  _GH_remove_edge_args__isset() : node_a_id(false), node_b_id(false) {}
  bool node_a_id :1;
  bool node_b_id :1;
} _GH_remove_edge_args__isset;

class GH_remove_edge_args {
 public:

  GH_remove_edge_args(const GH_remove_edge_args&);
  GH_remove_edge_args& operator=(const GH_remove_edge_args&);
  GH_remove_edge_args() : node_a_id(0), node_b_id(0) {
  }

  virtual ~GH_remove_edge_args() throw();
  int32_t node_a_id;
  int32_t node_b_id;

  _GH_remove_edge_args__isset __isset;

  void __set_node_a_id(const int32_t val);

  void __set_node_b_id(const int32_t val);

  bool operator == (const GH_remove_edge_args & rhs) const
  {
    if (!(node_a_id == rhs.node_a_id))
      return false;
    if (!(node_b_id == rhs.node_b_id))
      return false;
    return true;
  }
  bool operator != (const GH_remove_edge_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GH_remove_edge_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GH_remove_edge_pargs {
 public:


  virtual ~GH_remove_edge_pargs() throw();
  const int32_t* node_a_id;
  const int32_t* node_b_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GH_remove_edge_result__isset {
  _GH_remove_edge_result__isset() : success(false) {}
  bool success :1;
} _GH_remove_edge_result__isset;

class GH_remove_edge_result {
 public:

  GH_remove_edge_result(const GH_remove_edge_result&);
  GH_remove_edge_result& operator=(const GH_remove_edge_result&);
  GH_remove_edge_result() : success(0) {
  }

  virtual ~GH_remove_edge_result() throw();
  int32_t success;

  _GH_remove_edge_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const GH_remove_edge_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GH_remove_edge_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GH_remove_edge_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GH_remove_edge_presult__isset {
  _GH_remove_edge_presult__isset() : success(false) {}
  bool success :1;
} _GH_remove_edge_presult__isset;

class GH_remove_edge_presult {
 public:


  virtual ~GH_remove_edge_presult() throw();
  int32_t* success;

  _GH_remove_edge_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GHClient : virtual public GHIf {
 public:
  GHClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GHClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t add_node(const int32_t node_id);
  void send_add_node(const int32_t node_id);
  int32_t recv_add_node();
  int32_t add_edge(const int32_t node_a_id, const int32_t node_b_id);
  void send_add_edge(const int32_t node_a_id, const int32_t node_b_id);
  int32_t recv_add_edge();
  int32_t remove_node(const int32_t node_id);
  void send_remove_node(const int32_t node_id);
  int32_t recv_remove_node();
  int32_t remove_edge(const int32_t node_a_id, const int32_t node_b_id);
  void send_remove_edge(const int32_t node_a_id, const int32_t node_b_id);
  int32_t recv_remove_edge();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GHProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<GHIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GHProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add_node(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_edge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_node(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_edge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GHProcessor(boost::shared_ptr<GHIf> iface) :
    iface_(iface) {
    processMap_["add_node"] = &GHProcessor::process_add_node;
    processMap_["add_edge"] = &GHProcessor::process_add_edge;
    processMap_["remove_node"] = &GHProcessor::process_remove_node;
    processMap_["remove_edge"] = &GHProcessor::process_remove_edge;
  }

  virtual ~GHProcessor() {}
};

class GHProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GHProcessorFactory(const ::boost::shared_ptr< GHIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GHIfFactory > handlerFactory_;
};

class GHMultiface : virtual public GHIf {
 public:
  GHMultiface(std::vector<boost::shared_ptr<GHIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GHMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GHIf> > ifaces_;
  GHMultiface() {}
  void add(boost::shared_ptr<GHIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t add_node(const int32_t node_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_node(node_id);
    }
    return ifaces_[i]->add_node(node_id);
  }

  int32_t add_edge(const int32_t node_a_id, const int32_t node_b_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_edge(node_a_id, node_b_id);
    }
    return ifaces_[i]->add_edge(node_a_id, node_b_id);
  }

  int32_t remove_node(const int32_t node_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_node(node_id);
    }
    return ifaces_[i]->remove_node(node_id);
  }

  int32_t remove_edge(const int32_t node_a_id, const int32_t node_b_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_edge(node_a_id, node_b_id);
    }
    return ifaces_[i]->remove_edge(node_a_id, node_b_id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class GHConcurrentClient : virtual public GHIf {
 public:
  GHConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GHConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t add_node(const int32_t node_id);
  int32_t send_add_node(const int32_t node_id);
  int32_t recv_add_node(const int32_t seqid);
  int32_t add_edge(const int32_t node_a_id, const int32_t node_b_id);
  int32_t send_add_edge(const int32_t node_a_id, const int32_t node_b_id);
  int32_t recv_add_edge(const int32_t seqid);
  int32_t remove_node(const int32_t node_id);
  int32_t send_remove_node(const int32_t node_id);
  int32_t recv_remove_node(const int32_t seqid);
  int32_t remove_edge(const int32_t node_a_id, const int32_t node_b_id);
  int32_t send_remove_edge(const int32_t node_a_id, const int32_t node_b_id);
  int32_t recv_remove_edge(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
